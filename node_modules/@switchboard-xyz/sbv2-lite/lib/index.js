"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnchorWallet = exports.isVersionedTransaction = void 0;
const anchor = __importStar(require("@coral-xyz/anchor"));
const big_js_1 = __importDefault(require("big.js"));
__exportStar(require("./idl"), exports);
/**
 * Check if a transaction object is a VersionedTransaction or not
 *
 * @param tx
 * @returns bool
 */
const isVersionedTransaction = (tx) => {
    return "version" in tx;
};
exports.isVersionedTransaction = isVersionedTransaction;
class AnchorWallet {
    payer;
    constructor(payer) {
        this.payer = payer;
    }
    get publicKey() {
        return this.payer.publicKey;
    }
    async signTransaction(tx) {
        if ((0, exports.isVersionedTransaction)(tx)) {
            tx.sign([this.payer]);
        }
        else {
            tx.partialSign(this.payer);
        }
        return tx;
    }
    async signAllTransactions(txs) {
        return txs.map((t) => {
            if ((0, exports.isVersionedTransaction)(t)) {
                t.sign([this.payer]);
            }
            else {
                t.partialSign(this.payer);
            }
            return t;
        });
    }
}
exports.AnchorWallet = AnchorWallet;
/** A Switchboard V2 wrapper to assist in decoding onchain accounts */
class SwitchboardProgram {
    /**
     * Switchboard Mainnet Program ID
     * SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f
     */
    static oracleProgramId = new anchor.web3.PublicKey("SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f");
    /**
     * Default confirmation options for fetching Solana data
     */
    static defaultConfirmOptions = {
        commitment: "confirmed",
    };
    /**
     * Switchboard Anchor program object
     */
    program;
    /**
     * Selected Solana cluster
     */
    cluster;
    constructor(program, cluster) {
        this.program = program;
        this.cluster = cluster;
    }
    /**
     * Return the Switchboard program
     * @param connection optional connection object if not using the default endpoints
     * @param confirmOptions optional confirmation options. defaults to commitment level 'confirmed'
     */
    static async load(connection = new anchor.web3.Connection(anchor.web3.clusterApiUrl("devnet")), confirmOptions = SwitchboardProgram.defaultConfirmOptions) {
        const provider = new anchor.AnchorProvider(connection, new AnchorWallet(anchor.web3.Keypair.fromSeed(new Uint8Array(32).fill(1))), confirmOptions);
        const anchorIdl = await anchor.Program.fetchIdl(SwitchboardProgram.oracleProgramId, provider);
        if (!anchorIdl) {
            throw new Error(`failed to read devnet idl for ${SwitchboardProgram.oracleProgramId}`);
        }
        const program = new anchor.Program(anchorIdl, SwitchboardProgram.oracleProgramId, provider);
        return new SwitchboardProgram(program, "devnet");
    }
    /**
     * Return the Switchboard mainnet-beta program
     * @param connection optional connection object if not using the default endpoints
     * @param confirmOptions optional confirmation options. defaults to commitment level 'confirmed'
     */
    static async loadMainnet(connection = new anchor.web3.Connection(anchor.web3.clusterApiUrl("mainnet-beta")), confirmOptions = SwitchboardProgram.defaultConfirmOptions) {
        return SwitchboardProgram.load(connection, confirmOptions);
    }
    /** Parse an aggregators account data and return the latest confirmed result if valid
     * @param aggregator an aggregators deserialized account data
     * @param maxStaleness the maximum duration in seconds before a result is considered invalid. Defaults to 0 which ignores any checks
     * @returns latest confirmed result as a big.js or null if the latest confirmed round has insufficient oracle responses or data is too stale
     */
    getLatestAggregatorValue(aggregator, maxStaleness = 0) {
        if ((aggregator.latestConfirmedRound?.numSuccess ?? 0) === 0) {
            return null;
        }
        if (maxStaleness !== 0) {
            const now = new anchor.BN(Date.now() / 1000);
            const latestRoundTimestamp = aggregator.latestConfirmedRound.roundOpenTimestamp;
            const staleness = now.sub(latestRoundTimestamp);
            if (staleness.gt(new anchor.BN(maxStaleness))) {
                return null;
            }
        }
        const mantissa = new big_js_1.default(aggregator.latestConfirmedRound.result.mantissa.toString());
        const scale = aggregator.latestConfirmedRound.result.scale;
        const oldDp = big_js_1.default.DP;
        big_js_1.default.DP = 20;
        const result = mantissa.div(new big_js_1.default(10).pow(scale));
        big_js_1.default.DP = oldDp;
        return result;
    }
    /** Fetch and decode an aggregator account
     * @param aggregatorPubkey the aggregator's public key
     * @param commitment optional connection commitment level
     * @returns deserialized aggregator account, as specified by the Switchboard IDL
     */
    async fetchAggregator(aggregatorPubkey, commitment) {
        return await this.program.account.aggregatorAccountData?.fetch(aggregatorPubkey, commitment);
    }
    /** Fetch and decode an aggregator's latest confirmed value if valid
     * @param aggregatorPubkey the aggregator's public key
     * @param commitment optional connection commitment level
     * @param maxStaleness the maximum duration in seconds before a result is considered invalid. Defaults to 0 which ignores any checks
     * @returns latest confirmed result as a big.js or null if the latest confirmed round has insufficient oracle responses or data is too stale
     */
    async fetchAggregatorLatestValue(aggregatorPubkey, commitment, maxStaleness = 0) {
        const aggregator = await this.fetchAggregator(aggregatorPubkey, commitment);
        return this.getLatestAggregatorValue(aggregator, maxStaleness);
    }
    /** Decode an aggregator's account info
     * @param accountInfo the aggregatror's account info
     * @returns deserialized aggregator account, as specified by the Switchboard IDL
     */
    decodeAggregator(accountInfo) {
        const coder = new anchor.BorshAccountsCoder(this.program.idl);
        const aggregator = coder.decode("AggregatorAccountData", accountInfo?.data);
        return aggregator;
    }
    /** Decode an aggregator and get the latest confirmed round
     * @param accountInfo the aggregator's account info
     * @param maxStaleness the maximum duration in seconds before a result is considered invalid. Defaults to 0 which ignores any checks
     * @returns latest confirmed result as a big.js or null if the latest confirmed round has insufficient oracle responses or data is too stale
     */
    decodeLatestAggregatorValue(accountInfo, maxStaleness = 0) {
        const aggregator = this.decodeAggregator(accountInfo);
        return this.getLatestAggregatorValue(aggregator, maxStaleness);
    }
}
exports.default = SwitchboardProgram;
