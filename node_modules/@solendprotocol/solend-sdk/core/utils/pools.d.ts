/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
import BigNumber from "bignumber.js";
import SwitchboardProgram from "@switchboard-xyz/sbv2-lite";
import { PoolType } from "../types";
import { RawReserveType } from "../../state";
export declare function fetchPools(oldPools: Array<PoolType>, connection: Connection, switchboardProgram: SwitchboardProgram, programId: string, currentSlot: number, debug?: boolean): Promise<{
    [k: string]: {
        name: string | null;
        address: string;
        authorityAddress: string;
        reserves: {
            disabled: boolean;
            cumulativeBorrowRate: BigNumber;
            cTokenExchangeRate: BigNumber;
            name: string | undefined;
            accumulatedProtocolFees: BigNumber;
            reserveUtilization: BigNumber;
            cTokenMint: string;
            feeReceiverAddress: string;
            reserveSupplyLimit: BigNumber;
            reserveBorrowLimit: BigNumber;
            borrowFee: BigNumber;
            flashLoanFee: BigNumber;
            protocolLiquidationFee: number;
            hostFee: number;
            interestRateSpread: number;
            targetBorrowApr: number;
            targetUtilization: number;
            maxUtilizationRate: number;
            minBorrowApr: number;
            maxBorrowApr: number;
            superMaxBorrowRate: number;
            supplyInterest: BigNumber;
            borrowInterest: BigNumber;
            totalSupply: BigNumber;
            totalBorrow: BigNumber;
            availableAmount: BigNumber;
            rateLimiter: {
                remainingOutflow: BigNumber | null;
                config: {
                    windowDuration: BigNumber;
                    maxOutflow: BigNumber;
                };
                windowStart: BigNumber;
                previousQuantity: BigNumber;
                currentQuantity: BigNumber;
            };
            totalSupplyUsd: BigNumber;
            totalBorrowUsd: BigNumber;
            availableAmountUsd: BigNumber;
            loanToValueRatio: number;
            liquidationThreshold: number;
            maxLiquidationThreshold: number;
            liquidationBonus: number;
            maxLiquidationBonus: number;
            liquidityAddress: string;
            cTokenLiquidityAddress: string;
            liquidityFeeReceiverAddress: string;
            address: string;
            mintAddress: string;
            decimals: number;
            symbol: string;
            logo: string | undefined;
            price: BigNumber;
            poolAddress: string;
            pythOracle: string;
            switchboardOracle: string;
            addedBorrowWeightBPS: import("bn.js");
            borrowWeight: string;
            priceData: {
                spotPrice: number;
                emaPrice: number;
                lstAdjustmentRatio?: BigNumber | undefined;
                priceSource?: string | undefined;
            } | undefined;
            emaPrice: number | undefined;
            minPrice: BigNumber;
            maxPrice: BigNumber;
            reserveType: import("../../state").AssetType;
            scaledPriceOffsetBPS: import("bn.js");
            extraOracle: string | undefined;
            liquidityExtraMarketPriceFlag: number;
            liquidityExtraMarketPrice: import("bn.js");
            attributedBorrowValue: import("bn.js");
            attributedBorrowLimitOpen: import("bn.js");
            attributedBorrowLimitClose: import("bn.js");
        }[];
        owner: string;
    };
}>;
export type ReserveType = ReturnType<typeof formatReserve>;
export declare function formatReserve(reserve: RawReserveType, priceData?: {
    spotPrice: number;
    emaPrice: number;
    lstAdjustmentRatio?: BigNumber;
    priceSource?: string;
}, currentSlot?: number, metadata?: {
    symbol: string;
    logo: string;
    name?: string;
}, config?: {
    showApy: boolean;
    avgSlotTime: number;
}): {
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    name: string | undefined;
    accumulatedProtocolFees: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationBonus: number;
    maxLiquidationBonus: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: string;
    logo: string | undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: string;
    priceData: {
        spotPrice: number;
        emaPrice: number;
        lstAdjustmentRatio?: BigNumber | undefined;
        priceSource?: string | undefined;
    } | undefined;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    reserveType: import("../../state").AssetType;
    scaledPriceOffsetBPS: import("bn.js");
    extraOracle: string | undefined;
    liquidityExtraMarketPriceFlag: number;
    liquidityExtraMarketPrice: import("bn.js");
    attributedBorrowValue: import("bn.js");
    attributedBorrowLimitOpen: import("bn.js");
    attributedBorrowLimitClose: import("bn.js");
};
export declare const getReservesOfPool: (lendingMarketPubkey: PublicKey, connection: Connection, programId: string, currentSlot: number, switchboardProgram?: SwitchboardProgram, debug?: boolean) => Promise<{
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    name: string | undefined;
    accumulatedProtocolFees: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationBonus: number;
    maxLiquidationBonus: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: string;
    logo: string | undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: string;
    priceData: {
        spotPrice: number;
        emaPrice: number;
        lstAdjustmentRatio?: BigNumber | undefined;
        priceSource?: string | undefined;
    } | undefined;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    reserveType: import("../../state").AssetType;
    scaledPriceOffsetBPS: import("bn.js");
    extraOracle: string | undefined;
    liquidityExtraMarketPriceFlag: number;
    liquidityExtraMarketPrice: import("bn.js");
    attributedBorrowValue: import("bn.js");
    attributedBorrowLimitOpen: import("bn.js");
    attributedBorrowLimitClose: import("bn.js");
}[]>;
export declare const getReservesFromChain: (connection: Connection, switchboardProgram: SwitchboardProgram, programId: string, currentSlot: number, debug?: boolean) => Promise<{
    disabled: boolean;
    cumulativeBorrowRate: BigNumber;
    cTokenExchangeRate: BigNumber;
    name: string | undefined;
    accumulatedProtocolFees: BigNumber;
    reserveUtilization: BigNumber;
    cTokenMint: string;
    feeReceiverAddress: string;
    reserveSupplyLimit: BigNumber;
    reserveBorrowLimit: BigNumber;
    borrowFee: BigNumber;
    flashLoanFee: BigNumber;
    protocolLiquidationFee: number;
    hostFee: number;
    interestRateSpread: number;
    targetBorrowApr: number;
    targetUtilization: number;
    maxUtilizationRate: number;
    minBorrowApr: number;
    maxBorrowApr: number;
    superMaxBorrowRate: number;
    supplyInterest: BigNumber;
    borrowInterest: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    availableAmount: BigNumber;
    rateLimiter: {
        remainingOutflow: BigNumber | null;
        config: {
            windowDuration: BigNumber;
            maxOutflow: BigNumber;
        };
        windowStart: BigNumber;
        previousQuantity: BigNumber;
        currentQuantity: BigNumber;
    };
    totalSupplyUsd: BigNumber;
    totalBorrowUsd: BigNumber;
    availableAmountUsd: BigNumber;
    loanToValueRatio: number;
    liquidationThreshold: number;
    maxLiquidationThreshold: number;
    liquidationBonus: number;
    maxLiquidationBonus: number;
    liquidityAddress: string;
    cTokenLiquidityAddress: string;
    liquidityFeeReceiverAddress: string;
    address: string;
    mintAddress: string;
    decimals: number;
    symbol: string;
    logo: string | undefined;
    price: BigNumber;
    poolAddress: string;
    pythOracle: string;
    switchboardOracle: string;
    addedBorrowWeightBPS: import("bn.js");
    borrowWeight: string;
    priceData: {
        spotPrice: number;
        emaPrice: number;
        lstAdjustmentRatio?: BigNumber | undefined;
        priceSource?: string | undefined;
    } | undefined;
    emaPrice: number | undefined;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    reserveType: import("../../state").AssetType;
    scaledPriceOffsetBPS: import("bn.js");
    extraOracle: string | undefined;
    liquidityExtraMarketPriceFlag: number;
    liquidityExtraMarketPrice: import("bn.js");
    attributedBorrowValue: import("bn.js");
    attributedBorrowLimitOpen: import("bn.js");
    attributedBorrowLimitClose: import("bn.js");
}[]>;
export declare function fetchPoolByAddress(poolAddress: string, connection: Connection, debug?: boolean): Promise<{
    pubkey: PublicKey;
    account: {
        executable: boolean;
        owner: PublicKey;
        lamports: number;
        data: Buffer;
        rentEpoch?: number | undefined;
    };
    info: import("../../state").Reserve;
} | null>;
