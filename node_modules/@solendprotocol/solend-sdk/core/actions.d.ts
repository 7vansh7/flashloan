import { AddressLookupTableAccount, BlockhashWithExpiryBlockHeight, Connection, PublicKey, Transaction, TransactionInstruction, VersionedTransaction } from "@solana/web3.js";
import BN from "bn.js";
import { Obligation } from "../state/obligation";
import { EnvironmentType } from "./types";
import { ReserveType } from "./utils";
export type SaveWallet = {
    publicKey: PublicKey;
    name: string;
    signTransaction<T extends Transaction | VersionedTransaction>(tx: T): Promise<T>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(txs: T[]): Promise<T[]>;
};
type ActionConfigType = {
    environment?: EnvironmentType;
    customObligationAddress?: PublicKey;
    hostAta?: PublicKey;
    hostPublicKey?: PublicKey;
    customObligationSeed?: string;
    lookupTableAddress?: PublicKey;
    repayReserve?: ReserveType;
    token2022Mint?: string;
    repayToken2022Mint?: string;
    debug?: boolean;
    computeUnitPriceMicroLamports?: number;
    computeUnitLimit?: number;
};
export declare const toHexString: (byteArray: number[]) => string;
export type ActionType = "deposit" | "borrow" | "withdraw" | "repay" | "mint" | "redeem" | "depositCollateral" | "withdrawCollateral" | "forgive" | "liquidate";
type InputPoolType = {
    address: string;
    owner: string;
    name: string | null;
    authorityAddress: string;
    reserves: Array<ReserveType>;
};
export declare const CROSSBAR_URL1 = "https://crossbar.save.finance";
export declare const CROSSBAR_URL2 = "https://crossbar.switchboard.xyz";
export declare class SolendActionCore {
    programId: PublicKey;
    connection: Connection;
    reserve: ReserveType;
    pool: InputPoolType;
    publicKey: PublicKey;
    obligationAddress: PublicKey;
    obligationAccountInfo: Obligation | null;
    userTokenAccountAddress: PublicKey;
    userCollateralAccountAddress: PublicKey;
    seed: string;
    positions?: number;
    amount: BN;
    hostAta?: PublicKey;
    hostPublicKey?: PublicKey;
    pullPriceTxns: Array<VersionedTransaction>;
    setupIxs: Array<TransactionInstruction>;
    lendingIxs: Array<TransactionInstruction>;
    cleanupIxs: Array<TransactionInstruction>;
    preTxnIxs: Array<TransactionInstruction>;
    postTxnIxs: Array<TransactionInstruction>;
    depositReserves: Array<PublicKey>;
    borrowReserves: Array<PublicKey>;
    lookupTableAccount?: AddressLookupTableAccount;
    wallet: SaveWallet;
    debug: boolean;
    repayInfo?: {
        userRepayTokenAccountAddress: PublicKey;
        userRepayCollateralAccountAddress: PublicKey;
        repayToken2022Mint?: PublicKey;
        repayWrappedAta?: PublicKey;
        repayMint: PublicKey;
        reserveAddress: PublicKey;
    };
    token2022Mint?: PublicKey;
    wrappedAta?: PublicKey;
    environment: EnvironmentType;
    computeUnitPriceMicroLamports?: number;
    computeUnitLimit?: number;
    errors: Array<any>;
    private constructor();
    static initialize(pool: InputPoolType, reserve: ReserveType, action: ActionType, amount: BN, wallet: SaveWallet, connection: Connection, config: ActionConfigType): Promise<SolendActionCore>;
    static buildForgiveTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, obligationAddress: PublicKey, config: ActionConfigType): Promise<SolendActionCore>;
    static buildDepositTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildBorrowTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildDepositReserveLiquidityTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildRedeemReserveCollateralTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildDepositObligationCollateralTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildWithdrawCollateralTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildWithdrawTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildRepayTxns(pool: InputPoolType, reserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    static buildLiquidateTxns(pool: InputPoolType, withdrawReserve: ReserveType, connection: Connection, amount: string, wallet: SaveWallet, config: ActionConfigType): Promise<SolendActionCore>;
    getVersionedTransaction(): Promise<VersionedTransaction>;
    getLegacyTransactions(): Promise<{
        preLendingTxn: Transaction | null;
        lendingTxn: Transaction | null;
        postLendingTxn: Transaction | null;
    }>;
    getTransactions(blockhash: BlockhashWithExpiryBlockHeight): Promise<{
        preLendingTxn: VersionedTransaction | null;
        lendingTxn: VersionedTransaction | null;
        postLendingTxn: VersionedTransaction | null;
        pullPriceTxns: VersionedTransaction[] | null;
    }>;
    addForgiveIx(): void;
    addDepositIx(): void;
    addDepositReserveLiquidityIx(): void;
    addRedeemReserveCollateralIx(): void;
    addWithdrawObligationCollateralIx(): Promise<void>;
    addDepositObligationCollateralIx(): void;
    addBorrowIx(): void;
    addWithdrawIx(): Promise<void>;
    addRepayIx(): Promise<void>;
    addLiquidateIx(repayReserve: ReserveType): Promise<void>;
    addSupportIxs(action: ActionType): Promise<void>;
    private addWrapIx;
    private addUnwrapIx;
    private addWrapRepayIx;
    private buildPullPriceTxns;
    private addRefreshReservesIxs;
    private addRefreshObligationIxs;
    private addObligationIxs;
    private addAtaIxs;
    private addCAtaIxs;
    private updateWSOLAccount;
}
export {};
