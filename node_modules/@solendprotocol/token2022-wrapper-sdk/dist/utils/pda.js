"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReserveAuthorityTokenAccount = exports.getReserveAuthority = exports.getWrapperTokenMint = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const constants_1 = require("../constants");
const constants_2 = require("../constants");
const getWrapperTokenMint = (token2022Mint) => {
    const [wrapperTokenMint, _] = web3.PublicKey.findProgramAddressSync([constants_2.WRAPPER_TOKEN_MINT_SEED, token2022Mint.toBuffer()], constants_1.PROGRAM_ID);
    return wrapperTokenMint;
};
exports.getWrapperTokenMint = getWrapperTokenMint;
const getReserveAuthority = (token2022Mint) => {
    const [reserveAuthority, _] = web3.PublicKey.findProgramAddressSync([constants_1.RESERVE_AUTHORITY_SEED, token2022Mint.toBuffer()], constants_1.PROGRAM_ID);
    return reserveAuthority;
};
exports.getReserveAuthority = getReserveAuthority;
const getReserveAuthorityTokenAccount = (token2022Mint) => {
    let reserveAuthority = (0, exports.getReserveAuthority)(token2022Mint);
    const [reserveAuthorityTokenAccount, _] = web3.PublicKey.findProgramAddressSync([
        constants_1.RESERVE_AUTHORITY_TOKEN_ACCOUNT_SEED,
        token2022Mint.toBuffer(),
        reserveAuthority.toBuffer(),
    ], constants_1.PROGRAM_ID);
    return reserveAuthorityTokenAccount;
};
exports.getReserveAuthorityTokenAccount = getReserveAuthorityTokenAccount;
