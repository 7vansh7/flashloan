"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDepositAndMintWrapperTokensInstruction = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const types_1 = require("../types");
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const Layout = __importStar(require("../types/layout"));
const bn_js_1 = __importDefault(require("bn.js"));
const spl_token_1 = require("@solana/spl-token");
const BufferLayout = require("buffer-layout");
const createDepositAndMintWrapperTokensInstruction = (userAuthority, userToken2022TokenAccount, token2022Mint, amount) => __awaiter(void 0, void 0, void 0, function* () {
    const dataLayout = BufferLayout.struct([
        BufferLayout.u8("instruction"),
        Layout.uint64("amount"),
    ]);
    const data = Buffer.alloc(dataLayout.span);
    dataLayout.encode({
        instruction: types_1.TokenWrapperInstruction.DepositAndMintWrapperTokens,
        amount: new bn_js_1.default(amount),
    }, data);
    const wrapperTokenMint = (0, utils_1.getWrapperTokenMint)(token2022Mint);
    const reserveAuthority = (0, utils_1.getReserveAuthority)(token2022Mint);
    const reserveAuthorityTokenAccount = (0, utils_1.getReserveAuthorityTokenAccount)(token2022Mint);
    const userWrapperTokenAccount = yield (0, spl_token_1.getAssociatedTokenAddress)(wrapperTokenMint, userAuthority, false);
    const keys = [
        {
            pubkey: userAuthority,
            isSigner: true,
            isWritable: true,
        },
        {
            pubkey: reserveAuthority,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: token2022Mint,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: wrapperTokenMint,
            isSigner: false,
            isWritable: true,
        },
        {
            pubkey: userWrapperTokenAccount,
            isSigner: false,
            isWritable: true,
        },
        {
            pubkey: userToken2022TokenAccount,
            isSigner: false,
            isWritable: true,
        },
        {
            pubkey: reserveAuthorityTokenAccount,
            isSigner: false,
            isWritable: true,
        },
        {
            pubkey: constants_1.TOKEN_PROGRAM_ID,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: constants_1.TOKEN_2022_PROGRAM_ID,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: constants_1.SYSTEM_PROGRAM_ID,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: constants_1.ASSOCIATED_TOKEN_PROGRAM_ID,
            isSigner: false,
            isWritable: false,
        },
        {
            pubkey: constants_1.RENT_SYSVAR,
            isSigner: false,
            isWritable: false,
        },
    ];
    return new web3.TransactionInstruction({
        keys,
        programId: constants_1.PROGRAM_ID,
        data,
    });
});
exports.createDepositAndMintWrapperTokensInstruction = createDepositAndMintWrapperTokensInstruction;
